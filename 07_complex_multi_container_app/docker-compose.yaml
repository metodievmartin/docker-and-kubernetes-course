# Docker Compose configuration for Laravel multi-container application
# This setup includes web server, PHP interpreter, database, and utility containers

services:
  # Nginx web server - handles HTTP requests and serves static content
  server:
#    image: 'nginx:stable-alpine'
    build:
      context: .                                # Build context is the root project directory (not just dockerfiles/)
                                                # This is crucial because nginx.dockerfile needs access to files outside 
                                                # the dockerfiles/ directory (e.g., src/ and nginx/ folders)
      dockerfile: dockerfiles/nginx.dockerfile  # Path to the Nginx Dockerfile
    ports:
      - '8000:80'                               # Map host port 8000 to container port 80
    volumes:
      - ./src:/var/www/html                     # Mount source code to Nginx document root
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro  # Mount Nginx config as read-only
    depends_on:
      - php                                     # Ensure PHP service is started first
      - mysql                                   # Ensure MySQL service is started first

  # PHP-FPM service - processes PHP code for the Laravel application
  php:
    build:
      context: .                                # Build context is the root project directory
                                                # This allows php.dockerfile to access the src/ directory
                                                # for the COPY instruction in the Dockerfile
      dockerfile: dockerfiles/php.dockerfile    # Path to the PHP Dockerfile
    volumes:
      - ./src:/var/www/html:delegated           # Mount source code with delegated performance option
      - laravel-cache:/var/www/html/storage/framework/cache  # Persist Laravel cache
      - laravel-views:/var/www/html/storage/framework/views  # Persist compiled views
      - laravel-sessions:/var/www/html/storage/framework/sessions  # Persist sessions

  # MySQL database - stores application data
  mysql:
    image: 'mysql:5.7'                          # Use MySQL 5.7 image from Docker Hub
    platform: linux/amd64                       # Specify the platform for compatibility (esp. with M1 Macs)
    env_file:
      - ./env/mysql.env                         # Load MySQL environment variables from file
    volumes:
      - mysql-data:/var/lib/mysql               # Persist MySQL data between container restarts

  # Composer utility container - manages PHP dependencies
  composer:
    build:
      context: ./dockerfiles                    # Build context is the dockerfiles directory only
                                                # This is sufficient because composer.dockerfile doesn't need
                                                # to access files outside the dockerfiles/ directory
      dockerfile: composer.dockerfile           # Path to the Composer Dockerfile
    volumes:
      - ./src:/var/www/html                     # Mount source code to access composer.json

  # Artisan utility container - runs Laravel's command-line tool
  artisan:
    build:
      context: .                                # Build context is the root project directory
                                                # This is needed because it reuses the php.dockerfile which
                                                # needs access to the src/ directory
      dockerfile: dockerfiles/php.dockerfile    # Reuse the PHP Dockerfile
    volumes:
      - ./src:/var/www/html:delegated           # Mount source code with delegated performance option
    entrypoint: ["php", "/var/www/html/artisan"] # Override entrypoint to run Artisan directly

  # npm utility container - manages JavaScript dependencies and builds assets
  npm:
    image: 'node:14-alpine'                     # Use Node.js 14 Alpine image from Docker Hub
    working_dir: /var/www/html                  # Set working directory to the mounted source code
    entrypoint: ["npm"]                         # Set entrypoint to npm command
    volumes:
      - ./src:/var/www/html                     # Mount source code to access package.json

# Define named volumes for data persistence
volumes:
  mysql-data:                                   # Named volume for MySQL data persistence
  laravel-cache:                                # Named volume for Laravel cache files
  laravel-views:                                # Named volume for compiled views
  laravel-sessions:                             # Named volume for sessions
